'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _package = require('../package.json');

var _child_process = require('child_process');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /* eslint-disable no-console */


var wasHandled = false;
var basePath = _path2.default.join(__dirname, '..');

var CONFIG = {
  react: {
    starter: 'react-web',
    configFiles: {
      'default.babelrc': '.babelrc',
      'default.eslintignore': '.eslintignore',
      'default.eslintrc': '.eslintrc',
      'default.flowconfig': '.flowconfig',
      'default.gitignore': '.gitignore',
      'default-main.js': 'src/main.js',
      'App.js': 'src/App.js',
      'flow-typed': '',
      test: '',
      'webpack.config.js': ''
    },
    mkdir: ['assets', 'src', 'node_modules'],
    seedFiles: {
      'assets/index.html': '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>App</title>\n</head>\n<body>\n  <script src="/main.js"></script>\n</body>\n</html>\n'
    },
    packages: [
    // react
    'react', 'react-dom', 'class-autobind', 'classnames'],
    devPackages: [
    // babel (with react)
    'babel-core', 'babel-preset-es2015', 'babel-preset-react', 'babel-preset-stage-2', 'babel-plugin-transform-class-properties',
    // eslint
    'eslint', 'babel-eslint', 'eslint-config-react-app', 'eslint-plugin-flowtype', 'eslint-plugin-import', 'eslint-plugin-jest', 'eslint-plugin-jsx-a11y@^5.1.1', 'eslint-plugin-react',
    // flow
    'flow-bin', 'flow-typed',
    // webpack
    'webpack@3.x.x', 'webpack-dev-server@2.x.x', 'babel-loader', 'css-loader', 'css-modules-require-hook', 'raw-loader', 'style-loader',
    // testing
    'jest', 'enzyme', 'enzyme-adapter-react-16', 'react-addons-test-utils',
    // code formatting
    'prettier-eslint', 'prettier-eslint-cli']
  },
  node: {
    starter: 'node',
    configFiles: {
      'default.babelrc': '.babelrc',
      'default.eslintignore': '.eslintignore',
      'default.eslintrc': '.eslintrc',
      'default.flowconfig': '.flowconfig',
      'default.gitignore': '.gitignore',
      'default.npmignore': '.npmignore',
      'default-main.js': 'src/main.js',
      'flow-typed': ''
    },
    mkdir: ['lib', 'src', 'node_modules'],
    seedFiles: {},
    packages: ['node-fetch'],
    devPackages: [
    // babel (without react)
    'babel-core', 'babel-preset-es2015-native-generators', 'babel-preset-stage-2', 'babel-plugin-transform-class-properties', 'babel-plugin-transform-flow-strip-types', 'babel-plugin-syntax-flow',
    // eslint
    'eslint', 'babel-eslint', 'eslint-config-react-app', 'eslint-plugin-flowtype', 'eslint-plugin-import', 'eslint-plugin-jest', 'eslint-plugin-jsx-a11y@^5.1.1', 'eslint-plugin-react',
    // flow
    'flow-bin', 'flow-typed',
    // testing
    'jest',
    // code formatting
    'prettier-eslint', 'prettier-eslint-cli']
  }
};

_commander2.default.version(_package.version).usage('init <project_name> [options]').option('-t, --type [react|react-native|node]', 'Create a project of the given type.', 'react');

_commander2.default.command('init <project_name>').description('Create a directory with the given name and initialize an empty project.').action(function (name) {
  wasHandled = true;
  createProject(name, _commander2.default.type);
});

_commander2.default.parse(process.argv);
if (!wasHandled) {
  _commander2.default.help();
}

function createProject(name, type) {
  if (!CONFIG.hasOwnProperty(type)) {
    console.log('Type "' + type + '" not yet supported.');
    return;
  }
  var config = CONFIG[type];
  var starter = config.starter,
      configFiles = config.configFiles,
      mkdir = config.mkdir,
      seedFiles = config.seedFiles;

  var starterPath = basePath + '/starter/' + starter;
  console.log('Creating directory "' + name + '" ...');
  _shelljs2.default.mkdir(name);
  _shelljs2.default.cd(name);
  console.log('Creating direcotries ...');
  if (mkdir && mkdir.length) {
    _shelljs2.default.mkdir.apply(_shelljs2.default, _toConsumableArray(mkdir));
  }
  console.log('Writing package.json ...');
  var pkgJSON = _shelljs2.default.cat(starterPath + '/default-package.json');
  var pkg = JSON.parse(pkgJSON);
  pkg.name = name;
  pkg.description = name;
  _shelljs2.default.ShellString(JSON.stringify(pkg, null, 2)).to('./package.json');
  console.log('Copying config files ...');
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.keys(configFiles)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var srcFile = _step.value;

      var dstFile = configFiles[srcFile];
      _shelljs2.default.cp('-R', starterPath + '/' + srcFile, './' + dstFile);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = Object.keys(seedFiles)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var fileName = _step2.value;

      var content = seedFiles[fileName];
      _shelljs2.default.ShellString(content).to('./' + fileName);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  console.log('Installing packages ...');
  installPackages(config.packages, false, function () {
    console.log('Installing dev packages ...');
    installPackages(config.devPackages, true, function () {
      console.log('Installing Flow type declarations ...');
      installFlowTypes(name, function () {
        console.log('Project created successfully.');
      });
    });
  });
}

function installPackages(packages, isDev, callback) {
  if (packages.length === 0) {
    callback();
    return;
  }
  var args = ['add'];
  if (isDev) {
    args.push('--dev');
  }
  args = args.concat(packages);
  var child = (0, _child_process.spawn)(binPath('yarn'), args, { cwd: process.cwd(), stdio: 'inherit' });
  child.on('close', function (code) {
    if (code !== 0) {
      console.log('yarn exited with code ' + code);
      process.exit();
    } else {
      callback();
    }
  });
}

function installFlowTypes(projectName, callback) {
  var args = ['install'];
  var child = (0, _child_process.spawn)(binPath('flow-typed'), args, { cwd: process.cwd(), stdio: 'inherit' });
  child.on('close', function (code) {
    if (code !== 0) {
      console.log('flow-typed exited with code ' + code);
      process.exit();
    } else {
      callback();
    }
  });
}

function binPath(name) {
  return _path2.default.join(__dirname, '../node_modules/.bin', name);
}